#include <boost/optional.hpp>

#include "format.h"
#include <iostream>

{{#template}}
class {{Name}} {
public:
{{#has_parent}}
    typedef {{ParentName}}::Oneway::{{Name}}Oneway Oneway;
{{/has_parent}}
{{#no_parent}}
    typedef {{Name}}Oneway Oneway;
{{/no_parent}}

{{$subtemplate=template}}

    {{#unique_field}}
    {{#block}}
    {{Name}}& add{{Name}}() {
        {{name}}_.emplace_back();
        return {{name}}_.back();
    }

    {{Name}}::Oneway addOneway{{Name}}() {
        {{name}}_.emplace_back();
        return {{name}}_.back().oneway();
    }
    {{/block}}
    {{#var}}
    template <class... T>
    void set{{Name}}(T... t) {
        {{name}}_.clear();
        FormatContext format(t...);
        {{name}}_.insert(
                {{name}}_.end(), format.begin(), format.end());
    }
    {{/var}}
    {{/unique_field}}

    void generate(std::string* string) const {
        if (ONEWAY_OVERRIDE_) {
            Oneway::staticFinalize(ONEWAY_OVERRIDE_.get_ptr());
            string->append(
                    ONEWAY_OVERRIDE_->data(),
                    ONEWAY_OVERRIDE_->data() + ONEWAY_OVERRIDE_->size());
            return;
        }
        {{#field}}
        {{#str}}*string += "{{str}}";{{/str}}
        {{#var}}string->insert(string->end(),
                {{#escape}}{{escape}}({{/escape}}{{name}}_.begin(){{#escape}}){{/escape}},
                {{#escape}}{{escape}}({{/escape}}{{name}}_.end(){{#escape}}){{/escape}});
        {{/var}}
        {{#block}}
        for (const {{Name}}& subblock: {{name}}_) {
          subblock.generate(string);
        }
        {{/block}}
        {{/field}}
    }

    Oneway oneway() const {
        ONEWAY_OVERRIDE_ = OnewayContext();
        return Oneway(ONEWAY_OVERRIDE_.get_ptr());
    }

private:
    mutable boost::optional<OnewayContext> ONEWAY_OVERRIDE_;
    {{#unique_field}}
    {{#var}}std::string {{name}}_;{{/var}}
    {{#block}}std::vector<{{Name}}> {{name}}_;{{/block}}
    {{/unique_field}}
};

{{/template}}
