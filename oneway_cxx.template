#include "oneway_context.h"

{{#template}}

class {{Name}}Oneway {
public:
    {{$subtemplate:template}}

    explicit {{Name}}Oneway(OnewayContext* context):
            context_(context){{#variable}}, {{name}}Count_(0){{/variable}}
    {
        {{#put}}
        context_->put("{{str}}", {{length}});
        {{/put}}
        context_->setState({{realBegin}});
    }

    {{#variable}}
    template <class... T>
    void set{{Name}}(T... t) {
        switch ({{name}}Count_) {
        default:
            context_->wrongNumber("{{name}}", {{max_count}});
        {{#iteration}}
            case {{index}}:
                {{$incoming:template/incoming}}
                context_->put(t...);
                {{$put:template/put}}
                context_->setState({{next_state}});
                break;
        {{/iteration}}
        }
        ++{{name}}Count_;
    }
    {{/variable}}

    {{#add_block}}
    {{Name}}Oneway add{{Name}}() {
        {{$incoming:template/incoming}}
        return {{Name}}Oneway(context_);
    }
    {{/add_block}}

    void finalize() {
        staticFinalize(context_);
    }

    static void staticFinalize(OnewayContext* context_) {
        {{#incoming}}
        // incoming in {{state}}
        {{#constant}}const char {{name}}[] = "{{str}}";
        {{/constant}}
        switch (context_->state()) {
        default:
            context_->wrongState(context_->state(), {{state}});
        {{#group}}
        {{#state}}case {{state}}: {{/state}}
            {{#put}}context_->put({{name}} + {{offset}}, {{length}});{{/put}}
            break;
        {{/group}}
        }
        {{/incoming}}
    }

    const char* data() const {
        return context_->data();
    }

    size_t size() const {
        return context_->size();
    }

private:
    OnewayContext* context_;
    {{#variable}}
    int {{name}}Count_;
    {{/variable}}
};

{{/template}}
